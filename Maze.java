import java.util.*;

/**
 * A class that represents a maze. A maze is constructed as a 2d array of int in which each int (0,1,2,3,4,9)
 * means different things. The integers in the array will refer to a tile that will be assigned in
 * the GamePanel class.
 * 
 * @ author: The 2D arrays were implemented by Kaori Hayashi. Most of the other parts were implemented by Sandra Xu.
 * @ version: 2018/5/16
 * 
 */
public class Maze
{
    int[][] maze;
    int rows, columns, items;
   
    /**
     * A constructor that takes in the level of maze and input and creates a 2D array maze. The size
     * of maze differs by the level. The integers in the array will refer to a tile that will be assigned in
     * the GamePanel class.
     * 
     * 0: not visited
     * 1: wall
     * 2: visited
     * 3: items
     * 4: current location
     * 9: goal
     * 
     * @param - String difficulty
     */
    public Maze(String difficulty) {
        if (difficulty == "easy") { // change maze into something better
            this.rows = 12;
            this.columns = 13;
            this.items =  3;
            
            // an easy level maze
            maze = new int[][]  
            {{1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,0,1,0,1,0,1,0,0,0,0,0,1},
            {1,0,1,0,0,0,1,0,1,1,1,0,1},
            {1,3,0,0,1,1,1,0,0,0,0,0,1},
            {1,0,1,3,0,0,0,0,1,1,1,0,1},
            {1,0,1,0,1,1,1,0,1,0,0,0,1},
            {1,0,1,0,1,0,0,0,1,1,1,0,1},
            {1,0,1,0,1,1,1,0,1,0,1,3,1},
            {1,0,1,1,1,0,0,0,0,0,0,0,1},
            {1,0,0,0,0,0,1,1,0,0,0,0,1},
            {1,0,0,0,0,0,0,0,0,0,1,9,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1}};
        } else if (difficulty == "medium") {
            this.rows = 24;
            this.columns = 25;
            this.items = 3;
            
            // a medium level maze
            maze = new int[][]
            {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1},
            {1,0,1,0,0,0,0,1,0,1,1,0,1,1,0,3,0,0,0,0,0,0,1,0,1,1},
            {1,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1},
            {1,0,3,0,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1},
            {1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1},
            {1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1,1,1},
            {1,1,1,0,0,1,1,3,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1},
            {1,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1},
            {1,1,0,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1},
            {1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,1},
            {1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1},
            {1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1},
            {1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1},
            {1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1},
            {1,1,0,1,1,0,0,0,1,1,1,1,0,0,3,0,0,1,0,1,1,1,1,0,1,1},
            {1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1},
            {1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1},
            {1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,3,1,1},
            {1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0,0,0,1,1},
            {1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1},
            {1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,0,0,1,0,1,1},
            {1,1,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,9,1,1},           
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
            };   
        } else if (difficulty == "hard") {
            this.rows = 48;
            this.columns = 49;
            this.items = 3;
            
            // a hard level maze
            maze = new int[][]
            {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,0,1},
            {1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,3,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1},
            {1,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1},
            {1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1},
            {1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1},
            {1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,3,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1},
            {1,1,1,3,0,0,0,0,1,1,3,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,1},
            {1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1},
            {1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1},
            {1,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1},
            {1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1},
            {1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1},
            {1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1},
            {1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1},
            {1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,3,0,0,1,1,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1},
            {1,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1},
            {1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1},
            {1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1},
            {1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1},
            {1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1},
            {1,1,1,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1},
            {1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1},           
            {1,1,0,0,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1},
            {1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1},
            {1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1},
            {1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1},
            {1,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1},
            {1,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1},
            {1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1},
            {1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1},
            {1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1},
            {1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1},
            {1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1},
            {1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
            {1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1},
            {1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1},
            {1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1},
            {1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1},
            {1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1},
            {1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1},
            {1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1},
            {1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1},
            {1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1},
            {1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1},
            {1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,0,0,0,9,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}                      
            };   
        }
    }
    
     /*
      * Clones the maze and returns the cloned maze 2D array
      * @ return - int[][]
      */
     public int[][] clone() {
        int[][] clone = new int[this.rows][this.columns];
        for (int i=0; i < rows; i++) {
            for (int j=0; j<columns; j++) {
                clone[i][j] = maze[i][j];
            }
        }
        return clone;
    }
    
    
    /*
     * A setter method to set the maze to the input 2D array maze
     * @ param- 2d array of int that you want to set to
     */
    public void setMaze(int[][] newMaze){
        maze = newMaze;
    }

    /*
     * Returns a string representation of the maze
     * @ return - String
     */
    public String toString() {
        String s = "";
        for (int[] a: maze) {
            s += Arrays.toString(a) + "\n";
        }
        return s;
    }
    
    public int getRows() {
        return rows;
    }
    
    public int getCols() {
        return columns;
    }
    
    public int getItems() {
        return items;
    }
    
    public static void main(String[] args) {
        //Maze m = new Maze("easy");       
        //System.out.println("rows: " + m.rows + " columns: " + m.columns);
    }
}